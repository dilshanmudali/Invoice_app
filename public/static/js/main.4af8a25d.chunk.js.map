{"version":3,"sources":["Components/Header/Navigation.js","Components/Main/SideBar.jsx","Components/Main/Home/Chart.jsx","Components/Main/Home/Home.jsx","Components/Main/Category/ReadRow.jsx","Components/Main/Category/EditRow.jsx","Components/Main/Category/RenderCategory.jsx","Components/Main/Category/AddCategory.jsx","Components/Main/Customers/ReadRow.jsx","Components/Main/Customers/EditRow.jsx","Components/Main/Customers/RenderCustomers.jsx","Components/Main/Customers/Customers.jsx","Components/Main/Products/ReadOnlyRow.jsx","Components/Main/Products/EditRow.jsx","Components/Main/Products/RenderProducts.jsx","Components/Main/Products/Products.jsx","Components/Main/Invoice/RenderOrders.jsx","Components/Main/Invoice/Invoice.jsx","Auth/LoginForm.jsx","Auth/SignUpForm.jsx","Auth/Login.jsx","Components/Main/PDF/RenderPDF.jsx","Components/Main/PDF/Transactions.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navigation","setShowBar","setUser","onClick","prevState","className","fetch","method","then","r","ok","SideBar","showbar","to","exact","activeClassName","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Chart","chartData","completedCount","forEach","data","parseISO","created_at","getDay","labels","datasets","fill","borderColor","tension","height","width","options","scales","y","beginAtZero","ticks","stepSize","maintainAspectRatio","responsive","elements","plugins","legend","display","font","size","title","text","color","Home","totalProd","totalCustomers","userId","useState","totalRev","setTotalRev","totalOrd","setTotalOrd","setChartData","useEffect","json","invoices","totalOrders","filter","inv","complete","user_id","reduce","p","ord","parseFloat","grand_total","toFixed","length","start","end","delay","duration","decimals","ReadRow","cato","handleDelCategory","handleEditCat","id","category_name","e","EditRow","newName","handleChange","handleBack","type","name","required","placeholder","value","onChange","RenderCategory","category","setCategory","catId","setCatId","setNewName","preventDefault","target","onSubmit","headers","body","JSON","stringify","updateCat","updatedCatList","map","cat","AddCategory","submitCategory","addCategory","setAddCategory","autoComplete","handleDelcust","cus","handleEditCust","customer_name","customer_email","customer_contact","customer_address","addCustomer","email","cusomer_contact","RenderCustomers","customers","setCustomers","custId","setCustId","setAddCustomer","updateCust","updatedCustList","cust","Customers","submitCustomer","pattern","rows","cols","ReadOnlyRow","prod","handleDelProd","handleEditProd","product_name","product_description","product_price","product_quantity","newValues","handleGoBack","step","min","max","RenderProducts","products","setProducts","editProd","setEditProd","setNewValues","prodId","console","log","updatedProd","updatedProdList","Products","submitProduct","setText","newProduct","setNewProduct","suggestions","setSuggestions","matches","regex","RegExp","match","textChange","suggestion","categoryName","find","category_id","onSuggest","RenderOrders","orders","customerInfo","handleOrderCancel","handleFinalize","customerId","grandTotal","s","order_total","order","customer_id","order_quantity","Invoice","submitOrder","submitInv","invoice","customerInputVisible","setCustomerInputVisible","customerSuggestion","setCustomerSuggestion","customerName","customerContact","customerAddress","setCustomerInfo","productSuggestion","setProductSuggestion","productId","productName","productPrice","productQuantity","productInfo","setProductInfo","total","setTotal","newOrder","setNewOrder","Math","floor","random","invoiceInfo","setInvoiceInfo","input","customerHandle","customerData","invoice_num","invId","invNum","parseInt","currentQuan","inputP","productHandle","productData","product_id","LoginForm","onLogin","errors","setErrors","username","password","login","setLogin","isloading","setIsLoading","user","error","SignUpForm","organization_name","password_confirmation","signup","setSignup","err","Login","showLogin","setShowLogin","xmlns","viewBox","fillOpacity","d","RenderPDF","invoData","filterData","date","toLocaleDateString","customer","orderdups","i","window","print","Transactions","setInvoice","setFilterData","invByDate","setInvByDate","invData","dateIn","setInvoiceDate","searchFilter","toLowerCase","includes","pdfData","invo","handleRender","App","setOrders","ordersCopy","setOrdersCopy","sessionInv","setSessionInv","setTotalProd","setTotalCustomers","categories","totalProducts","a","style","marginLeft","path","newCategory","catLeft","proId","prodLeft","newCustomer","custLeft","newQuantity","invoice_id","updateProdList","orderLeft","updateInv","updateInvList","invLeft","invInfo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4af8a25d.chunk.js","sourcesContent":["import {ImMenu} from 'react-icons/im';\n\n\nconst Navigation = ({setShowBar, setUser}) => {\n\n    const handleLogOut = () => {\n        fetch('/logout', {\n            method: 'DELETE'\n        }).then(r => {\n            if(r.ok){\n                setUser(null);\n            }\n        })\n    }\n\n    return (\n        \n        <header> \n                     \n            <button onClick={() => setShowBar(prevState => !prevState)} ><ImMenu className=\"sidebar_btn\"/></button>\n            <div className=\"left-area\">\n                <h3>Store<span>Invo</span></h3>\n            </div>\n            <div className=\"right-area\">\n                <button onClick={handleLogOut} className=\"logout-btn\">Logout</button>\n            </div>\n            \n        </header>\n        \n    )\n}\n\nexport default Navigation\n","import React from 'react'\nimport {NavLink} from 'react-router-dom'\nimport {ImHome} from 'react-icons/im';\nimport {BiCategory} from 'react-icons/bi';\nimport {IoIosPeople} from 'react-icons/io'\nimport {FaFileInvoiceDollar} from 'react-icons/fa'\nimport {RiShoppingBag3Line, RiBillLine} from 'react-icons/ri'\n\n\nconst SideBar = ({showbar}) => {\n    return (\n        <div className={showbar ? \"sidebar\" : \"sidebar hidebar\"}>\n        {/* <center>\n\n        </center> */}\n        <NavLink to='/' exact={true} activeClassName='is-active'><ImHome /> <span>Home</span></NavLink>\n        <NavLink to='/category' activeClassName='is-active'><BiCategory/> <span>Category</span></NavLink>\n        <NavLink to='/products' activeClassName='is-active'><RiShoppingBag3Line /> <span>Products</span></NavLink>\n        <NavLink to='/customers' activeClassName='is-active'><IoIosPeople /> <span>Customers</span></NavLink>\n        <NavLink to='/orders' activeClassName='is-active'><RiBillLine/> <span>Invoice</span></NavLink>\n        <NavLink to='/pdf' activeClassName='is-active'><FaFileInvoiceDollar/> <span>Transactions</span></NavLink>\n    </div>\n    )\n}\n\nexport default SideBar\n","import { parseISO } from 'date-fns'\nimport { Line } from 'react-chartjs-2';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    } from 'chart.js';\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\nconst Chart = ({chartData}) => {\n\n    const options = {\n        scales: {\n            y: {\n                beginAtZero: true,\n                ticks: {\n                    stepSize: 1\n                }\n            }\n        },\n        maintainAspectRatio: false,\n        responsive: false,\n        elements: {\n        },\n        plugins: {\n            scales: {\n                beginAtZero: true,\n            },\n            legend: {\n                display: false,\n                labels: {\n                    display: true,\n                    font: {\n                        size: 15\n                    }\n                }\n            },\n            title: {\n                display: true,\n                text: 'Weekly Sales',\n                font: {\n                    size: 15,\n                    color: 'rgb(146 102 235)'\n                }\n               \n                }\n            }\n        }\n\n\n        const completedCount = [0,0,0,0,0,0,0]\n        chartData.forEach(data => completedCount[(parseISO(data.created_at).getDay())] += 1)\n\n\nconst labels = ['Sun', 'Mon','Tue','Wed','Thu','Fri','Sat'];\nconst data = {\n    labels: labels,\n    datasets: [{\n      data: completedCount,\n      fill: false,\n      borderColor: 'rgb(146 102 235)',\n      tension: 0.1\n    }]\n};\n\n    return (\n        <div className=\"canvas-div\">\n            <Line data={data} height={400} width={700} options={options} />\n        </div>\n    )\n}\n\nexport default Chart\n","import {useState, useEffect} from 'react'\nimport {BsCart4, BsBagDash} from 'react-icons/bs'\nimport {GiCoins} from 'react-icons/gi'\nimport {FaUsers} from 'react-icons/fa'\nimport ChartRev from './Chart'\nimport CountUp from 'react-countup';\n\n\nconst Home = ({totalProd, totalCustomers, userId}) => {\n\nconst [totalRev, setTotalRev] = useState('')\nconst [totalOrd, setTotalOrd] = useState('')\nconst [chartData, setChartData] = useState([])   \n\n    useEffect(() =>{\n        fetch('/invoices')\n        .then(r => r.json())\n        .then(invoices => { \n              const totalOrders = invoices.filter(inv => inv.complete === true && inv.user_id === userId)\n              const totalRev = totalOrders.reduce((p, ord) => {\n                return p + parseFloat(ord.grand_total)\n              },0)   \n            //   console.log(totalOrders)\n            //   let getData = totalOrders.reduce((acc, val) => {\n            //     //  let date = parseISO(val.created_at).toLocaleDateString()\n            //     if(acc[val.created_at] === undefined){\n            //         acc[val.created_at] = {date: parseISO(val.created_at).toLocaleDateString(), orders: val.grand_total}\n            //     }else{\n            //         acc[val.created_at].grand_total = acc[val.created_at].grand_total + val.grand_total\n            //     }\n            //     return acc\n            // },[])\n            setChartData(totalOrders)  \n            setTotalRev(totalRev.toFixed(2)) \n            setTotalOrd(totalOrders.length)\n        })\n    },[userId])\n\n    return (\n        <>\n        <div className=\"home-main\">\n            <div className=\"home-card-container\">\n                <div className=\"card-body\">\n                    <div className=\"float-left\">\n                        <h3>\n                           \n                            <span className=\"currency\">$</span>\n                            <span className=\"count\">\n                                <CountUp start={0} end={totalRev} delay={0} duration={1} decimals={2}/>\n                            </span>\n                        </h3>\n                        <p>Revenue</p>\n                    </div>\n                    <div className=\"float-right\">\n                        <i className=\"cart\"><GiCoins /></i>\n                    </div>          \n                </div>\n                <div className=\"card-body\">\n                    <div className=\"float-left\">\n                        <h3>\n                            <span className=\"currency\"></span>\n                            <span className=\"count\">\n                                <CountUp start={0} end={totalOrd} delay={0} duration={1}/>\n                            </span>\n                        </h3>\n                        <p>Orders</p>\n                    </div>\n                    <div className=\"float-right\">\n                        <i className=\"cart\"><BsCart4 /></i>\n                    </div>          \n                </div>\n                <div className=\"card-body\">\n                    <div className=\"float-left\">\n                        <h3>\n                            <span className=\"currency\"></span>\n                            <span className=\"count\">\n                            <CountUp start={0} end={totalProd} delay={0} duration={1}/>\n                            </span>\n                        </h3>\n                        <p>Products</p>\n                    </div>\n                    <div className=\"float-right\">\n                        <i className=\"cart\"><BsBagDash/></i>\n                    </div>          \n                </div>\n                <div className=\"card-body\">\n                    <div className=\"float-left\">\n                        <h3>\n                            <span className=\"currency\"></span>\n                            <span className=\"count\">\n                                <CountUp start={0} end={totalCustomers} delay={0} duration={1}/>\n                            </span>\n                        </h3>\n                        <p>Customers</p>\n                    </div>\n                    <div className=\"float-right\">\n                        <i className=\"cart\"><FaUsers/></i>\n                    </div>          \n                </div>\n            </div>\n           \n        </div>\n            <ChartRev chartData={chartData}/>\n        </>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport {BiEdit} from 'react-icons/bi'\nimport {RiChatDeleteLine} from 'react-icons/ri'\n\nconst ReadRow = ({cato, handleDelCategory, handleEditCat}) => {\n\n    \n    return (\n        <tr key={cato.id}>\n            <td >{cato.id}</td>\n            <td >{cato.category_name}</td>\n            <td>\n                <button onClick={(e) => handleEditCat(e,cato.id)}><BiEdit /></button>\n                <button onClick={() => handleDelCategory(cato.id)}><RiChatDeleteLine /></button>                    \n            </td>\n        </tr>\n    )\n}\n\nexport default ReadRow\n","import React from 'react'\nimport {AiOutlineFileDone} from 'react-icons/ai'\nimport {MdArrowBackIos} from 'react-icons/md'\n\nconst EditRow = ({cato, newName, handleChange, handleBack}) => {\n    return (\n        <tr key={cato.id}>\n            <td >{cato.id}</td>\n            <td >\n                <input \n                   type='text'\n                   name='category_name'\n                   required = {true}\n                   placeholder = 'Name'\n                   value = {newName.category_name}\n                   className = 'cat-i' \n                   onChange={handleChange}\n                />   \n            </td>\n            <td>\n            <button><AiOutlineFileDone /></button>\n            <button onClick={handleBack}><MdArrowBackIos/></button>                   \n            </td>\n        </tr>\n    )\n}\n\nexport default EditRow\n","import {useState, Fragment} from 'react'\nimport ReadOnlyRow from './ReadRow'\nimport EditRow from './EditRow'\n\nconst RenderCategory = ({category, handleDelCategory, setCategory, userId}) => {\n\n    \n    const [catId, setCatId] = useState(null)\n    const [newName, setNewName] = useState({\n        \"user_id\" : userId,\n        \"category_name\": \"\",\n    })\n\n    const handleEditCat = (e,catId) => {\n       e.preventDefault()\n       setCatId(catId)\n    }\n    \n    const handleChange = e => {\n        setNewName({\n            ...newName,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        fetch(`/categories/${catId}`, {\n            method: 'PATCH',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                category_name: newName.category_name,\n            })\n        })\n        .then(r => r.json())\n        .then(updateCat => {\n            const updatedCatList = category.map(cat => {\n                if(cat.id === updateCat.id){\n                    return updateCat;\n                }\n                else{\n                    return cat\n                }\n            })\n            setCategory(updatedCatList);\n        })\n        setNewName({\n            \"category_name\": \"\"\n        })\n        setCatId(null)\n    }\n\n    const handleBack = () => {\n        setCatId(null)\n    }\n    \n    return (\n       <div className='render-products-container'>\n           <form onSubmit={handleSubmit}>\n            <table className='render-table'>\n                <thead>\n                    <tr>\n                        <th>Category ID</th>\n                        <th>Category Name</th>\n                        <th>Edit/Del</th>\n                    </tr>\n                    </thead>\n                    <tbody>{category.map(cato => ( \n                        <Fragment key={cato.id}>\n                            {catId === cato.id ? (\n                                <EditRow cato={cato} handleChange={handleChange}\n                                newName={newName}\n                                handleBack={handleBack}/>\n                            ) : (\n                                <ReadOnlyRow cato={cato} handleDelCategory={handleDelCategory}\n                                handleEditCat={handleEditCat}/>\n                            )}\n                        </Fragment>\n                            ))}                                 \n                    </tbody>\n            </table>\n           </form>\n       </div>\n    )\n}\n\nexport default RenderCategory\n","import {useState} from 'react'\nimport RenderCategory from './RenderCategory'\n\nconst AddCategory = ({category, userId, submitCategory, handleDelCategory, setCategory}) => {\n\n    const [addCategory, setAddCategory] = useState({\n        \"category_name\": \"\",\n        \"user_id\" : userId\n    })  \n\n    const handleChange = (e) => {\n        setAddCategory({\n            ...addCategory,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        submitCategory(addCategory)\n        setAddCategory({\n            \"category_name\" : \"\",\n            \"user_id\" : userId\n        })\n    }\n\n    return (\n        <div className='category-container'>  \n            <div className='category-form-container'>     \n                <form onSubmit={handleSubmit} className='add-category-form'> \n                <label className='custom-field'>      \n                    <input type=\"text\" \n                    name=\"category_name\"\n                    autoComplete = 'off' \n                    required = {true}\n                    value = {addCategory.category_name}\n                    onChange={handleChange}\n                    />\n                    <span className='placeholder'>\n                        Enter Category\n                    </span>\n                </label>\n                    <button>Add Category</button>\n                </form>\n            </div>     \n            <div className='render-category'>\n                <RenderCategory category={category} \n                 setCategory={setCategory} handleDelCategory={handleDelCategory}/>\n            </div>\n        </div>\n    )\n}\n\nexport default AddCategory\n","import React from 'react'\nimport {BiEdit} from 'react-icons/bi'\nimport {RiChatDeleteLine} from 'react-icons/ri'\n\n\nconst ReadRow = ({handleDelcust, cus, handleEditCust}) => {\n    return (\n        <tr key={cus.id}>\n            <td >{cus.customer_name}</td>\n            <td >{cus.customer_email}</td>\n            <td >{cus.customer_contact}</td>\n            <td >{cus.customer_address}</td>\n            <td>\n                <button onClick={(e) => handleEditCust(cus.id)}><BiEdit /></button>\n                <button onClick={() => handleDelcust(cus.id)}><RiChatDeleteLine /></button>\n                \n            </td>\n        </tr>\n    )\n}\n\nexport default ReadRow\n","import React from 'react'\nimport {AiOutlineFileDone} from 'react-icons/ai'\nimport {MdArrowBackIos} from 'react-icons/md'\n\n\nconst EditRow = ({cus, addCustomer, handleChange, handleBack}) => {\n    return (\n        <tr key={cus.id}>\n            <td >\n                <input\n                    type='text'\n                    name='customer_name'\n                    required={true}\n                    placeholder= 'Name'\n                    value = {addCustomer.customer_name}\n                    className = 'cus-i'\n                    onChange={handleChange}\n                />    \n            </td>\n            <td >\n                 <input\n                    type='email'\n                    name='customer_email'\n                    required={true}\n                    placeholder= 'Email'\n                    value = {addCustomer.email}\n                    className = 'cus-i'\n                    onChange={handleChange}\n                />\n            </td>\n            <td >\n                 <input\n                    type='tel'\n                    name='customer_contact'\n                    required={true}\n                    placeholder= 'Contact'\n                    value = {addCustomer.cusomer_contact}\n                    className = 'cus-i'\n                    onChange={handleChange}\n                />\n            </td>\n            <td >\n            <input\n                    type='text'\n                    name='customer_address'\n                    required={true}\n                    placeholder= 'Address'\n                    value = {addCustomer.customer_address}\n                    className = 'cus-i'\n                    onChange={handleChange}\n                />\n            </td>\n            <td>\n                <button><AiOutlineFileDone /></button>\n                <button onClick={handleBack}><MdArrowBackIos/></button> \n                \n            </td>\n        </tr>\n    )\n}\n\nexport default EditRow\n","import {React, useState, Fragment} from 'react'\nimport ReadRow from './ReadRow'\nimport EditRow from './EditRow'\n\nconst RenderCustomers = ({customers, handleDelcust, setCustomers, userId}) => {\n    const [custId, setCustId] = useState(null)\n\n    const handleEditCust = custId => {\n        setCustId(custId)\n    }\n\n    const [addCustomer, setAddCustomer] = useState({\n        \"user_id\" : userId,\n        \"customer_name\": \"\",\n        \"customer_contact\": \"\",\n        \"customer_email\" : \"\",\n        \"customer_address\": \"\"\n    })\n\n    const handleChange = e => {\n        setAddCustomer({\n                ...addCustomer,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        fetch(`/customers/${custId}`, {\n            method: 'PATCH',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({addCustomer})\n        })\n        .then(r => r.json())\n        .then(updateCust => {\n            const updatedCustList = customers.map(cust => {\n                if(cust.id === updateCust.id){\n                    return updateCust\n                }else{\n                    return cust\n                }\n            })\n            setCustomers(updatedCustList)\n        })\n        setAddCustomer({ \n            \"customer_name\": \"\",\n            \"customer_contact\": \"\",\n            \"customer_email\" : \"\",\n            \"customer_address\": \"\"})\n        setCustId(null)\n    }\n\n    const handleBack = () => {\n        setCustId(null)\n    }\n\n    return (\n        <div className='render-customer-container'>\n            <form onSubmit={handleSubmit}>\n                <table className='render-table'>\n                    <thead>\n                        <tr>\n                            <th>Customer Name</th>\n                            <th>Email</th>\n                            <th>Contact</th>\n                            <th>Address</th>\n                            <th>Edit/Del</th>\n                        </tr>\n                    </thead>\n                    <tbody>{customers.map(cus => (\n                        <Fragment key={cus.id}> \n                        {custId === cus.id? (\n                            <EditRow cus={cus} addCustomer={addCustomer} handleChange={handleChange}\n                            handleBack={handleBack}/>\n                            ) : (\n                            <ReadRow cus={cus} handleDelcust={handleDelcust} handleEditCust={handleEditCust}/>\n                            )}\n                        </Fragment>\n                    ))\n                        }\n                        \n                    </tbody>\n                </table>\n        </form>\n    </div>\n    )\n}\n\nexport default RenderCustomers\n","import {useState} from 'react'\nimport RenderCustomers from './RenderCustomers'\n\nconst Customers = ({customers, submitCustomer, userId, handleDelcust, setCustomers}) => {\n\n    const [addCustomer, setAddCustomer] = useState({\n        \"user_id\" : userId,\n        \"customer_name\": \"\",\n        \"customer_contact\": \"\",\n        \"customer_email\" : \"\",\n        \"customer_address\": \"\"\n    })\n\n    const handleChange = (e) => {\n        setAddCustomer({\n            ...addCustomer,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        submitCustomer(addCustomer)\n        setAddCustomer({\n            \"user_id\" : userId,\n            \"customer_name\": \"\",\n            \"customer_contact\": \"\",\n            \"customer_email\" : \"\",\n            \"customer_address\": \"\"\n        })\n    }\n\n\n    return (\n        <div className='customer-container'>  \n        <div className='customer-form-container'>     \n            <form onSubmit={handleSubmit} className='add-customer-form'> \n            <label className='customer-custom-field'>      \n                <input type=\"text\" \n                name=\"customer_name\"\n                autoComplete = 'off'\n                required = {true}\n                className=\"customer-name\"\n                value = {addCustomer.customer_name}\n                onChange={handleChange}\n                />\n                <span className='customer-placeholder'>\n                    Customer Name\n                </span>\n            </label> \n            <label className='customer-custom-field'>      \n                <input type=\"email\" \n                name=\"customer_email\"\n                autoComplete = 'off'\n                required = {true}\n                className=\"customer-email\"\n                value = {addCustomer.customer_email}\n                onChange={handleChange}\n                />\n                <span className='customer-placeholder'>\n                    Customer Email\n                </span>\n            </label>     \n            <label className='customer-custom-field'>      \n                <input type=\"tel\" \n                pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\"\n                required\n                placeholder=\"contact\"\n                name=\"customer_contact\"\n                autoComplete = 'off' \n                className=\"customer-contact\"\n                value = {addCustomer.customer_contact}\n                onChange={handleChange}\n                />          \n            </label>    \n            <small>Format: 1234567890</small> \n            <div className='customer-address-custom-field'>   \n                <textarea type=\"text-area\" \n                className='customer-address'\n                name=\"customer_address\"\n                autoComplete = 'off' \n                required = {true}\n                rows=\"4\" cols=\"20\"\n                value = {addCustomer.customer_address}\n                onChange={handleChange}\n                >\n                 </textarea>\n                <span className='customer-address-placeholder'>\n                    Address\n                </span>\n            </div>\n                <button>Add Customer</button>\n            </form>\n        </div>     \n        <div className='render-customer'>\n            <RenderCustomers customers={customers} handleDelcust={handleDelcust} userId={userId} setCustomers={setCustomers}/>\n        </div>\n    </div>\n    )\n}\n\nexport default Customers\n","import React from 'react'\nimport {BiEdit} from 'react-icons/bi'\nimport {RiChatDeleteLine} from 'react-icons/ri'\n\nconst ReadOnlyRow = ({prod, handleDelProd, handleEditProd}) => {\n    return (\n        <tr key={prod.id}> \n                <td >{prod.id}</td>\n                <td >{prod.product_name}</td>\n                <td >{prod.product_description}</td>\n                <td >$ {prod.product_price}</td>\n                <td >{prod.product_quantity}</td>\n                <td>\n                    <button onClick={(e) => handleEditProd(e,prod.id)}><BiEdit /></button>\n                    <button onClick={() => handleDelProd(prod.id)}><RiChatDeleteLine /></button>                 \n                </td>\n        </tr>\n    )\n}\n\nexport default ReadOnlyRow\n","import React from 'react'\nimport {AiOutlineFileDone} from 'react-icons/ai'\nimport {MdArrowBackIos} from 'react-icons/md'\n\nconst EditRow = ({prod, newValues, handleChange, handleGoBack}) => {\n    return (\n        <tr key={prod.id}> \n            <td >{prod.id}</td>\n            <td >{prod.product_name}</td>\n            <td >{prod.product_description}</td>\n            <td >\n                <input \n                    type='number'\n                    name='product_price'\n                    required = {true}\n                    placeholder='$'\n                    step='any'\n                    value={newValues.product_price}\n                    onChange={handleChange}\n                    className='prod-i'\n                /> \n            </td>\n            <td >\n                <input \n                    type='number'\n                    name='product_quantity'\n                    min=\"1\" max=\"500\"\n                    required = {true}\n                    value={newValues.product_quantity}\n                    onChange={handleChange}\n                    className='prod-q'\n                /> \n            </td>\n            <td>\n                <button><AiOutlineFileDone /></button>\n                <button onClick={handleGoBack}><MdArrowBackIos/></button>\n        </td>\n    </tr>\n    )\n}\n\nexport default EditRow\n","import {Fragment, useState} from 'react'\nimport ReadOnlyRow from './ReadOnlyRow'\nimport EditRow from './EditRow'\n\nconst RenderProducts = ({products, handleDelProd, setProducts}) => {\n\n    const [editProd, setEditProd] = useState(null)\n    const [newValues, setNewValues] = useState({\n        \"product_price\" : \"\",\n        \"product_quantity\" : \"\",\n    })\n\n    const handleEditProd = (e,prodId) => {\n       e.preventDefault()\n       setEditProd(prodId)\n    }\n    \n    const handleChange = e => {\n        setNewValues({\n            ...newValues,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const handleEditsubmit = (e) => {\n        e.preventDefault()\n        console.log(editProd)\n        fetch(`/products/${editProd}`, {\n            method: 'PATCH',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                product_price: newValues.product_price,\n                product_quantity : newValues.product_quantity\n            })\n        })\n        .then(r => r.json())\n        .then(updatedProd => {\n            const updatedProdList = products.map(prod => {\n                if(prod.id === updatedProd.id){\n                    return updatedProd;\n                }\n                else{\n                    return prod\n                }\n            })\n            setProducts(updatedProdList);\n        })\n        setNewValues({\n            \"product_price\" : \"\",\n            \"product_quantity\" : \"\",\n        })\n        setEditProd(null)\n    }\n\n    const handleGoBack = () => {\n        setEditProd(null)\n    }\n\n    return (\n        <div className='render-products-container'>\n        <form onSubmit={handleEditsubmit}>\n            <table className='render-table'>\n                <thead>\n                    <tr>\n                        <th>Id</th>\n                        <th>Name</th>\n                        <th>Description</th>\n                        <th>Price</th>\n                        <th>Quantity</th>\n                        <th>Edit/Del</th>\n                    </tr>\n                </thead>\n                <tbody>{products.map(prod => (\n                    <Fragment>\n                        {editProd === prod.id ? (\n                            <EditRow prod={prod} newValues={newValues} handleChange={handleChange} handleGoBack={handleGoBack}/>\n                        ) : \n                            <ReadOnlyRow prod={prod} handleDelProd={handleDelProd} handleEditProd={handleEditProd} />\n                        } \n                    </Fragment>\n                    ))}              \n                </tbody>\n            </table>\n        </form>\n    </div>\n    )\n}\n\nexport default RenderProducts\n","import {useState} from 'react'\nimport RenderProducts from './RenderProducts'\n\nconst Products = ({products, handleDelProd, category, submitProduct, setProducts }) => {\n    const [text, setText] = useState('') \n    const [newProduct, setNewProduct] = useState({\n        \"product_name\" : \"\",\n        \"product_description\" : \"\",\n        \"product_price\" : \"\",\n        \"product_quantity\" : \"\",\n        \"category_id\" : \"\"\n    })  \n    const [suggestions, setSuggestions] = useState([])\n    const textChange = (text) => {      \n        let matches = []\n        if (text.length > 0) {\n            matches = category.filter(cat => {\n                const regex = new RegExp(`${text}`, \"gi\");\n                return cat.category_name.match(regex)\n            })\n        }\n        setSuggestions(matches)\n        setText(text)\n    }\n \n\n    const onSuggest = categoryName => {\n        setText(categoryName);\n\n        let id = category.find(cat => cat.category_name === categoryName).id\n        setNewProduct({\n            ...newProduct, \n            category_id : id\n        })    \n        setSuggestions([])\n    }\n\n\n    const handleChange = (e) => {\n        setNewProduct({\n            ...newProduct,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()    \n        submitProduct(newProduct)\n        setNewProduct({\n            \"product_name\" : \"\",\n            \"product_description\" : \"\",\n            \"product_price\" : \"\",\n            \"product_quantity\" : \"\",\n            \"category_id\" : \"\"\n        })\n        setText('')\n    }\n\n  \n    \n\n    return (\n        <div className='product-container'> \n         \n        <div className='product-form-container'>     \n            <form onSubmit={handleSubmit} className='add-product-form'> \n            <label className='product-custom-field'>      \n                <input type=\"text\" \n                name=\"product_name\"\n                autoComplete = 'off' \n                required = {true}\n                className=\"product-name\"\n                value = {newProduct.product_name}\n                onChange={handleChange}\n                />\n                <span className='product-placeholder'>\n                    Product\n                </span>\n            </label>\n\n            <div className='product-price-container'>\n                <label className='product-custom-field'>      \n                <h6>Price</h6>\n                    <input type=\"number\" \n                    name=\"product_price\"\n                    autoComplete = 'off' \n                    required = {true}\n                    className=\"price\"\n                    step=\"any\"\n                    placeholder='$'\n                    value = {newProduct.product_price}\n                    onChange={handleChange}\n                    />\n                   \n                </label>\n                \n                  <label \n                  className='product-custom-field'>     \n                  <h6>Quantity</h6>\n                    <input type=\"number\" \n                    className='product-quantity'\n                    name=\"product_quantity\"\n                    autoComplete = 'off' \n                    required = {true}\n                    min=\"1\" max=\"500\"\n                    value = {newProduct.product_quantity}\n                    onChange={handleChange}\n                    />\n                </label>\n            </div>    \n            <div \n            className='product-category-container'>\n                <label className='product-custom-field'>\n                    <h6>Pick Category</h6>\n                    <input onChange={(e) => textChange(e.target.value)}\n                    name=\"text\" \n                    type='text' \n                    autoComplete = 'off' \n                    value={text} \n                    placeholder=\"Search...\"\n                    className = \"addCategory\"\n                    />\n                    {suggestions && suggestions.map(suggestion => <div className=\"suggestion\" onClick={() => onSuggest(suggestion.category_name)}  key={suggestion.id}>\n                        <p>{suggestion.category_name}</p></div>)}\n                </label>\n            </div>        \n            <div className='product-des-custom-field'>   \n                <textarea type=\"text-area\" \n                className='product-description'\n                name=\"product_description\"\n                autoComplete = 'off' \n                required = {true}\n                rows=\"4\" cols=\"50\"\n                value = {newProduct.product_description}\n                onChange={handleChange}\n                >\n                 </textarea>\n                <span className='product-des-placeholder'>\n                    Description\n                </span>\n            </div>\n        \n                <button>Add Product</button>\n            </form>\n        </div>     \n        <div className='render-product'>\n            <RenderProducts products={products} handleDelProd={handleDelProd} setProducts={setProducts}/>\n        </div>\n    </div>\n    )\n}\n\nexport default Products\n","// import React,{useState} from 'react'\n// import {BiEdit} from 'react-icons/bi'\n\nfunction RenderOrders({orders, customerInfo,  handleOrderCancel, handleFinalize}) {\n\n    const customerId = customerInfo.customerId\n    const grandTotal = orders.reduce((s, ord) => {\n        return s + parseFloat(ord.order_total)\n    },0)\n\n    \n    console.log((grandTotal))\n    return (\n        <div className='render-orders-container'>\n            <div className='orders-table-container'>\n            <table className='render-table'>\n                <thead>\n                    <tr>\n                        <th>customer id</th>\n                        <th>Product</th>\n                        <th>Product Price</th>\n                        <th>Product Quantity</th>                    \n                        <th>Total</th>\n                    </tr>\n                </thead>\n                <tbody>{orders.map(order => order.customer_id === customerId ? ((\n                    <tr key={order.id}>\n                        <td >{order.customer_id}</td>\n                        <td >{order.product_name}</td>\n                        <td >$ {order.product_price}</td>\n                        <td >{order.order_quantity}</td>\n                        <td >$ {order.order_total}</td>\n                        \n{/*     \n                        <td>\n                            <button><BiEdit /></button>    \n                        </td> */}\n                    </tr>\n                )) : null)\n                    }\n                    \n                </tbody>\n            </table>\n            </div>\n            \n            <div className=\"invoice-button-container\">                      <div>\n                        <button onClick={() => handleFinalize(customerId,grandTotal)}>\n                            Finalize\n                        </button>\n                        <button onClick={() => handleOrderCancel(customerId)}>Cancel Invoice</button>     \n                    </div>   \n                    <div className=\"total-render\">${(grandTotal).toFixed(2)}</div>       \n            </div>\n        </div>\n    )\n}\n\nexport default RenderOrders\n","import {useState} from 'react'\nimport RenderOrders from './RenderOrders'\n\nconst Invoice = ({customers, products, orders, submitOrder,  handleOrderCancel, handleFinalize, submitInv, invoice, userId}) => {\n\n    \n    //hide/show customer input\n    const [customerInputVisible, setCustomerInputVisible] = useState(true)\n    //customer States\n    const [customerSuggestion, setCustomerSuggestion] = useState([])\n    const [customerInfo, setCustomerInfo] = useState({\n        customerId : '',\n        customerName: '',\n        customerContact : '',\n        customerAddress : '',\n    })\n    //product States\n    const [productSuggestion, setProductSuggestion] = useState([])\n    const [productInfo, setProductInfo] = useState({\n        productId: '',\n        productName: '',\n        productPrice: '',\n        productQuantity: ''\n    })\n    const [total, setTotal] = useState(0)\n    //new order state \n    const [newOrder, setNewOrder] = useState({\n        \"customer_id\" : \"\",\n        \"product_id\" : \"\",\n        \"product_name\" : \"\",\n        \"order_quantity\" : \"\",\n        \"product_price\" : \"\",\n        \"order_total\" : \"\"\n    })\n\n    //invoice state \n    const [invoiceInfo, setInvoiceInfo] = useState({\n        \"customer_id\" : '',\n        \"user_id\" : userId,\n        \"invoice_num\" : Math.floor(100000 + Math.random()*9000000),\n        \"organization_name\" : '123Company'\n    })\n\n    //customer handlers\n    const customerHandle = input => {\n        let matches = []\n        if(input.length > 0){\n            matches = customers.filter(cus => {\n                const regex = new RegExp(`${input}`, \"gi\");\n                return cus.customer_name.match(regex)\n            })\n        }\n        setCustomerSuggestion(matches)\n        setCustomerInfo({\n            customerName: input\n        })\n    }\n\n    const onCustomerSuggest = customerData => {\n        setCustomerInfo({\n            customerId: customerData.id,\n            customerName: customerData.customer_name,\n            customerContact: customerData.customer_contact,\n            customerAddress : customerData.customer_address\n        })\n        setInvoiceInfo({\n            ...invoiceInfo,\n            customer_id: customerData.id\n        })\n        setNewOrder({\n            ...newOrder, \n            customer_id : customerData.id\n        })    \n        setCustomerSuggestion([])\n    }\n\n    // product handlers \n\n    const productHandle = inputP => {\n        let matches = [];\n        if(inputP.length > 0){\n            matches = products.filter(prod => {\n                const regex = new RegExp(`${inputP}`, \"gi\");\n                return prod.product_name.match(regex)\n            })\n        }\n        setProductSuggestion(matches); \n        setProductInfo({\n            productName: inputP\n        })     \n    }\n\n    const onProductSuggest = productData => {\n        setProductInfo({\n            productId: productData.id,\n            productName: productData.product_name,\n            productPrice: productData.product_price,\n            productQuantity: productData.product_quantity\n        })\n        setNewOrder({\n            ...newOrder, \n            product_id : productData.id,\n            product_name : productData.product_name,\n            product_price : productData.product_price,\n            order_total : total\n        })\n        \n\n        setProductSuggestion([])\n    }\n\n\n    const handleInvoiceSubmit = (e) => {\n        e.preventDefault()\n        // let invNum = \n        // setInvoiceInfo({\n        //     invoice_num : invNum\n        // })\n        console.log(invoiceInfo)\n        submitInv(invoiceInfo)\n        setCustomerInputVisible(false)\n    }\n\n    //handle orders\n    const handleChange = e => {\n        setNewOrder({\n            ...newOrder, \n            [e.target.name] : e.target.value,\n            \"order_total\" : (parseFloat(productInfo.productPrice)*parseFloat(e.target.value))\n        })\n        setTotal(() => (parseFloat(productInfo.productPrice) * parseFloat(e.target.value)).toFixed(2)) \n    }\n\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()  \n        let invNum = parseInt(invoiceInfo.invoice_num)\n        const invId = invoice.find(inv => inv.invoice_num === invNum).id\n        const currentQuan = productInfo.productQuantity\n        submitOrder(newOrder, currentQuan, invId)\n        setProductInfo({\n            productName: '',\n            productPrice: '',\n            productQuantity: ''\n        })\n          setNewOrder({\n            \"customer_id\" : customerInfo.customerId,\n            \"product_id\" : \"\",\n            \"product_name\" : \"\",\n            \"order_quantity\" : \"\",\n            \"product_price\" : \"\",\n            \"order_total\" : \"\"})\n        setTotal(0)\n    }\n\n    const handleCancelInvo = () => {\n        console.log(invoiceInfo.invoice_num)\n        let invId = invoice.find(inv => inv.invoice_num === invoiceInfo.invoice_num).id\n        fetch(`invoices/${invId}`, {method: 'DELETE'})\n        setCustomerInfo({\n            customer_id: \"\"\n        })\n        setCustomerInputVisible(true)\n    }\n   \n    const handleClearForm = (e) => {\n        e.preventDefault()\n        setProductInfo({\n            productId: '',\n            productName: '',\n            productPrice: '',\n            productQuantity: ''\n        })\n        setNewOrder({\n            \"customer_id\" : customerInfo.customerId,\n            \"product_id\" : \"\",\n            \"product_name\" : \"\",\n            \"order_quantity\" : \"\",\n            \"product_price\" : \"\",\n            \"order_total\" : \"\"})\n        setTotal(0)\n    }\n\n    \n\n    return (\n        <div className=\"orders-container\">\n            <div className=\"orders-form-container\">   \n                <div className=\"invoice-number-form\">\n                     <form onSubmit={handleInvoiceSubmit} \n                     className=\"create-invoice-form\">\n                                {customerInputVisible ? \n                            (    \n                            <label className='invoice-custom-field'>\n                                <input type='text'\n                                    autoComplete = 'off'\n                                    required= {true}\n                                    onChange={(e) => customerHandle(e.target.value)}\n                                    name = 'customer-name'\n                                    value = {customerInfo.customerName}\n                                    />\n                                    <span className='customer-invoice-placeholder'>\n                                        Customer Name\n                                    </span>\n                                </label>\n                                ) \n                                : <div className='customer-invoice-info'>{customerInfo.customerName}</div> }\n                                {customerSuggestion && customerSuggestion.map((suggestion) => <div className='suggestions' onClick={() => onCustomerSuggest(suggestion)} key={suggestion.id}><p>{suggestion.customer_name}</p></div>)} \n                                {/* <div>customer contact:{customerInfo.customerContact}</div>\n                                <div>customer address:{customerInfo.customerAddress}</div>\n                                 <br/> */}\n                            {customerInputVisible ? (\n                            <button>Create Invoice</button>) : (\n                            <button onClick={handleCancelInvo}>Cancel</button>)}\n                     </form>\n                    \n                </div>\n                <div className=\"invoice-product-form-container\">\n                <form className=\"add-orders-form\" onSubmit={handleSubmit}>\n                    <label className='order-product-custom-field'>\n                        <input type='text' \n                            className='order-name-input'\n                            required = {true}\n                            onChange={(e) => productHandle(e.target.value)}\n                            value={productInfo.productName}\n                        />\n                        <span className='order-product-placeholder'>\n                            Product Name\n                        </span> \n                    </label>\n                    {productSuggestion && productSuggestion.map((suggestion) => <div className='suggestions' onClick={() => onProductSuggest(suggestion)} key={suggestion.id}><p>{suggestion.product_name}</p></div>)}\n                        {productInfo.productPrice ?\n                        \n                        <div className=\"order-price-container\"> $ {productInfo.productPrice}\n                        </div> : null }\n                    <div className=\"order-quantity-container\">\n                        <div>\n                            {productInfo.productName? ((\n                            (<h6>Quantity</h6>) &&\n                            <input type='number' \n                                name=\"order_quantity\"\n                                autoComplete = 'off' \n                                required = {true}\n                                min=\"1\" max={productInfo.productQuantity}\n                                value={newOrder.order_quantity}\n                                onChange = {handleChange}\n                            />)) : null}\n                        </div>\n                        </div>\n                        <div className=\"total-container\">\n                            <div>\n                                <h6>Av. Quan</h6>\n                                <div className='order-available-quan'>\n                                {productInfo.productQuantity? productInfo.productQuantity - newOrder.order_quantity : 0}\n                                </div>\n                            </div>\n                            <div className='available-container'>\n                                <h6>Total</h6>\n                                <div className='total-total'>$ {total? total : 0} \n                                </div>\n                            </div>\n                           \n                        </div>\n                    \n                   <div className='form-btn-container'>\n                    <button>Add to Order</button>\n                    <button onClick={handleClearForm}>Clear Form</button>\n                    </div>\n                </form>\n                </div>\n            </div> \n            \n             <div className='render-orders'>\n                <RenderOrders orders={orders} customerInfo={customerInfo}  handleOrderCancel={ handleOrderCancel} handleFinalize={handleFinalize}\n               /> \n            </div>\n        </div>\n    )\n}\n\nexport default Invoice\n","import React, {useState} from 'react'\n\nconst LoginForm = ({onLogin}) => {\n\n    const [errors, setErrors] = useState([])\n    const [login, setLogin] = useState({\n        username: '',\n        password: ''\n    })\n\n    const [isloading, setIsLoading] = useState(false)\n    \n\n    const handleChange = e => {\n        setLogin({\n            ...login,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setIsLoading(true);\n        fetch(\"/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(login),\n        }).then((r) => {\n          setIsLoading(false);\n          if (r.ok) {\n            r.json().then((user) => onLogin(user));\n          } else {\n            r.json().then((error) => setErrors(error.error));\n          }\n        });\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2>LOGIN</h2>\n            <input className='input-box'  placeholder='Your Username' type='text' id='username' \n            name = \"username\"autoComplete='off' value={login.username} \n            onChange={handleChange}\n            />\n            <input className='input-box'  placeholder='Password' type='password' id='password' \n            name = \"password\"\n            autoComplete='current-password' value={login.password} \n            onChange={handleChange}\n            />\n\n            <button className='login-btn' type='submit'>\n            {isloading ? \"Loading....\" : \"Login\"}\n\n            </button>\n            {/* {console.log(errors)} */}\n              <span className=\"err-container\">{errors}</span>\n            {/* {errors.map(err => {\n                return (\n                    <span key={err}>\n                        {err}\n                    </span>\n                )\n                })} */}\n        </form>\n    )              \n}\n\nexport default LoginForm\n","import {useState} from 'react'\n\nconst SignUpForm = ({onLogin}) => {\n\n    const [signup, setSignup] = useState({\n        username: '',\n        organization_name: '',\n        password: '',\n        password_confirmation: ''\n    })\n\n    const [isloading, setIsLoading] = useState(false)\n    const [errors, setErrors] = useState([])\n\n    const handleChange = e => {\n        setSignup({\n            ...signup,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        setErrors([]);\n        setIsLoading(true);\n        fetch(\"/signup\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(signup),\n        }).then((r) => {\n          setIsLoading(false);\n          if (r.ok) {\n            r.json().then(user => onLogin(user));\n          } else {\n            r.json().then((err) => setErrors(err.errors));\n          }\n        });\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2>Sign Up</h2>\n            <input className='input-box' placeholder='Username' type='text' id='username' \n             name = \"username\"autoComplete='off' value={signup.username} \n            onChange={handleChange}\n            />\n            <input className='input-box' placeholder='Organization Name' type='text' id='organization' \n             name = \"organization_name\"autoComplete='off' value={signup.organization_name} \n            onChange={handleChange}\n            />\n\n            <input className='input-box' placeholder='Password' type='password' id='password' \n             name = \"password\"\n            autoComplete='current-password' value={signup.password} \n            onChange={handleChange}\n            />\n            <input className='input-box' placeholder='Password Confirmation' type='password' \n             name = \"password_confirmation\"\n            id='password_confirmation' autoComplete='current-password' value={signup.password_confirmation}\n            onChange={handleChange} />\n            <button type='submit' className='signup-btn'>\n            {isloading ? \"Loading....\" : \"Sign Up\"}\n            </button>\n            {errors.map(err => {\n                return (\n                    <span className=\"err-container\" key={err}>\n                        {err}\n                    </span>\n                )\n                })}\n        </form>\n        )\n}\n\nexport default SignUpForm\n","import { useState } from \"react\"\nimport LoginForm from \"./LoginForm\"\nimport SignUpForm from \"./SignUpForm\"\nimport React from 'react'\n\nconst Login = ({onLogin}) => {\n\n    const [showLogin, setShowLogin] = useState(true)\n\n    return (\n        <div className=\"login-container\">\n            <h2 className=\"login-header\">STOREINVO</h2>\n           <div className=\"svg-2\">\n             <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#6433c6e8\" fillOpacity=\"1\" d=\"M0,192L48,170.7C96,149,192,107,288,80C384,53,480,43,576,42.7C672,43,768,53,864,69.3C960,85,1056,107,1152,106.7C1248,107,1344,85,1392,74.7L1440,64L1440,0L1392,0C1344,0,1248,0,1152,0C1056,0,960,0,864,0C768,0,672,0,576,0C480,0,384,0,288,0C192,0,96,0,48,0L0,0Z\"></path></svg>\n           </div>\n            <div className=\"auth-container\">\n                <div className='auth-card'>\n                    <div className='inner-card'>\n                        {showLogin ? (\n                        <div className= 'card-front'>   \n                            <LoginForm onLogin={onLogin}/>               \n                            <div>\n                                <button onClick={() => { \n                                    setShowLogin(false)\n                                }}>                     \n                                    Register Here\n                                </button>\n                            \n                            </div>\n                        </div>\n                            ) : (\n                        <div className='card-back'>\n                            <SignUpForm onLogin={onLogin}/>\n                            <div btn-class>\n                                <button onClick={() => { \n                                    setShowLogin(true);\n                                }}>\n                                    Log In\n                                </button>\n                            </div>\n                        </div>\n                        )}\n                    </div>\n                </div>\n                <div className=\"svg-1\">  \n                    <svg  xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#6433c6e8\" fillOpacity=\"1\" d=\"M0,64L48,58.7C96,53,192,43,288,85.3C384,128,480,224,576,245.3C672,267,768,213,864,181.3C960,149,1056,139,1152,117.3C1248,96,1344,64,1392,48L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"></path></svg> \n                </div> \n            </div> \n           \n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react'\nimport { parseISO } from 'date-fns'\n\nconst RenderPDF = ({filterData}) => {\n\n    const invoData = filterData.map(inv => {\n\n        let date = parseISO(inv.created_at).toLocaleDateString()\n\n        return(                      \n            <div className='pdf-container' key={inv.id}>\n                <div className='detail-container'>\n                    <div>\n                        <h3>Store:</h3>\n                        <span>From</span>\n\n                        <h2>{inv.organization_name}</h2>\n                        <p>email.com</p>\n                    </div>\n                    <div>\n                       <h3>Customer:</h3>\n                       <span>To</span>\n\n                       <h2>{inv.customer.customer_name}</h2>\n                       <p>{inv.customer.customer_address}</p>\n                       <h5>{inv.customer.customer_contact}</h5>\n                    </div>\n                </div>\n                <div className='inv-detail-container'>\n                        <div>Invoice No: <span>{inv.invoice_num}</span></div>\n                        <div>Date: <span>{date}</span></div>\n                </div>\n                <div className=\"inv-table-container\">\n                    <table className='inv-table'>\n                        <thead>\n                            <tr>\n                                <th>Product Name</th>\n                                <th>Product Quantity</th>\n                                <th>Product Price</th>\n                                <th>Total</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {inv.orderdups.map( i => <tr key={i.id}>\n                                <td >{i.product_name}</td>\n                                <td >{i.order_quantity}</td>\n                                <td >{i.product_price}</td>\n                                <td >$ {i.order_total}</td>\n                            </tr>)}\n                        </tbody>\n                    </table>\n                </div>\n                <div className='inv-tot-table-container'>\n                <table className='inv-table-total'>\n                    <thead>\n                        <tr>\n                            <th>Invoice Summary</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Total: ${inv.grand_total}</td>                           \n                        </tr>\n                    </tbody>\n                </table>\n                </div>\n            </div>\n        )\n    })\n \n    return (\n        <div className='render-pdf-container'>\n            {invoData}\n            <div className='print'>\n                <button onClick={() => window.print()}>Print</button>\n            </div>\n        </div>\n    )\n}\n\nexport default RenderPDF\n","import React,{useEffect, useState} from 'react'\nimport RenderPDF from './RenderPDF'\nimport {RiBillLine} from 'react-icons/ri'\nimport Calendar from 'react-calendar'\nimport 'react-calendar/dist/Calendar.css';\nimport { parseISO } from 'date-fns'\n\nconst Transactions = ({userId}) => {\n\n    const [invoice, setInvoice] = useState([])\n    const [filterData, setFilterData] = useState([])\n    const [invByDate, setInvByDate] = useState(invoice)\n    // const [date, setDate] = useState(new Date())\n\n    useEffect(() => {\n        fetch('/invoices')\n        .then(r => r.json())\n        .then(data => {\n            const invData = data.filter(d => d.complete === true && d.user_id === userId);\n            setInvoice(invData);\n        })\n    },[userId])\n\n    const onChange = dateIn => {\n        const setInvoiceDate = invoice.filter(inv => {\n            let date = parseISO(inv.created_at).toLocaleDateString()\n            return date === dateIn.toLocaleDateString()\n        })\n\n        console.log(dateIn.toLocaleDateString())\n        setInvByDate(setInvoiceDate)\n    }\n   \n    const handleRender = (invId) => {\n        let pdfData = invByDate.filter(invo => invo.id === invId)\n        setFilterData(pdfData)\n    }\n\n    const handleSearch = e => {\n        if(e.target.value ){\n            const searchFilter = invByDate.filter(inv => {\n                return inv.customer.customer_name.toLowerCase().includes((e.target.value).toLowerCase())\n            })\n            setInvByDate(searchFilter)\n        }else{\n            setInvByDate(invoice)\n        }\n       \n    }\n\n \n    \n    return (\n        <div className='transactions-container'>   \n            <div className='render-transactions-container'> \n                <div className='search-transactions'>\n                    <Calendar                       \n                        onChange={onChange}\n                        // value={date}\n                    />\n                </div>\n                <div>\n                    <input\n                        autoComplete = 'off' \n                        className='search-transactions'\n                        type='search' \n                        onChange={handleSearch}\n                        placeholder='Search..'\n                    />\n                </div>\n                <div className='transactions'>\n                    <ul>\n                        {invByDate.map(inv => \n                            <li \n                                key={inv.id}>\n                                    <span> <RiBillLine className='r-icon' />{inv.invoice_num} </span>\n                                    <span>{inv.customer.customer_name}</span>   \n                                    <button onClick={() => handleRender(inv.id)}>View</button>      \n                            </li>\n                        )}\n                    </ul>\n                </div>    \n            </div>     \n            <div className='render-pdf'>\n                <RenderPDF filterData={filterData}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Transactions\n","import {useState, useEffect} from \"react\";\nimport {Switch, Route} from \"react-router-dom\";\nimport Navigation from './Components/Header/Navigation'\nimport SideBar from './Components/Main/SideBar'\nimport Home from './Components/Main/Home/Home'\nimport AddCategory from './Components/Main/Category/AddCategory'\nimport Customers from './Components/Main/Customers/Customers'\nimport Products from './Components/Main/Products/Products'\nimport Invoice from './Components/Main/Invoice/Invoice'\nimport Login from './Auth/Login'\nimport Transactions from './Components/Main/PDF/Transactions'\n\nfunction App(){\n\n  const [user, setUser] = useState(null)\n  const [showbar, setShowBar] = useState(true)\n  const [category, setCategory] = useState([])\n  const [products, setProducts] = useState([])\n  const [customers, setCustomers] = useState([])\n  const [orders, setOrders] = useState([])\n  const [ordersCopy, setOrdersCopy] = useState([])\n  const [invoice, setInvoice] = useState([])\n  const [sessionInv, setSessionInv] = useState([])\n  const [totalProd, setTotalProd] = useState(0)\n  const [totalCustomers, setTotalCustomers] = useState(0)\n\n// Initial user fetch\n  useEffect(() => {\n    fetch('/me', {\n    })\n    .then(r => {\n      if(r.ok) {\n        r.json().then(user => {\n          //set user/category\n          setUser(user)\n          setCategory(user.categories)\n          setProducts(user.products)\n          setCustomers(user.customers)\n          setOrders(user.orders)\n          setOrdersCopy(user.orderdups)\n          setInvoice(user.invoices)\n          \n          const totalProducts = user.products.reduce((a, prod) => {\n            return a + prod.product_quantity \n          },0)\n\n\n          setTotalProd(totalProducts)     \n          setTotalCustomers(user.customers.length)\n        }) \n      }\n    })  \n     \n  },[])\n  \n\n  useEffect(() =>{\n    const totalProducts = products.reduce((a, prod) => {\n      return a + prod.product_quantity \n    },0)\n      setTotalProd(totalProducts)\n  },[products])\n\n\n  if(!user) return <Login onLogin={setUser}/>\n\n  //1. setting new category\n  const submitCategory = newCategory => {\n    fetch('/categories', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify(newCategory)\n    })\n    .then(r => r.json())\n    .then(newCategory => {\n      setCategory([...category, newCategory])\n     \n    })\n  }\n\n  //setting new customer\n  const submitCustomer = newCustomer => {\n    fetch('/customers', {\n      method: 'POST',\n      headers: {'Content-Type' : 'application/json'},\n      body: JSON.stringify(newCustomer)\n    })\n    .then(r => r.json())\n    .then(newCustomer => {\n      setCustomers([...customers, newCustomer]);\n    })\n    setTotalCustomers(customers.length)\n  }\n\n\n  const submitProduct = newProduct => {\n    fetch('/products', {\n      method: 'POST',\n      headers: {'Content-Type' : 'application/json'},\n      body: JSON.stringify(newProduct)\n    })\n    .then(r => r.json())\n    .then(newProduct => {\n      setProducts([...products, newProduct])\n    })\n  }\n\n\n\n\n  //handle order submit and update product quantity\n  const submitOrder = (newOrder, currentQuan, invId) => {\n    const id = newOrder.product_id;\n    const newQuantity = newOrder.order_quantity;  \n    fetch('/orders', {\n      method: 'POST',\n      headers: {'Content-Type' : 'application/json'},\n      body: JSON.stringify(newOrder)\n    })\n    .then(r => r.json())\n    .then(newOrder => {\n      setOrders([...orders, newOrder])\n    })\n\n    setSessionInv(invId)\n    // making order copy\n    fetch('/orderdups', {\n      method: 'POST',\n      headers: {'Content-Type' : 'application/json'},\n      body: JSON.stringify({\n        ...newOrder,\n        complete: false,\n        invoice_id : invId\n      })\n    })\n    .then(r => r.json())\n    .then(newOrder => {\n      setOrdersCopy([...ordersCopy, newOrder])\n    })\n\n\n    fetch(`products/${id}`, {\n      method: 'PATCH',\n      headers: {'Content-Type' : 'application/json'},\n      body: JSON.stringify({product_quantity: currentQuan - newQuantity})\n    })\n    .then(r => r.json())\n    .then(updatedProd => {\n      const updateProdList = products.map(prod => {\n        if(prod.id === updatedProd.id){\n          return updatedProd\n        }else{\n          return prod\n        }\n      })\n      setProducts(updateProdList)\n    })\n  }\n\n//Delete category/product/customer/order\n\n  const handleDelCategory = id => {\n    fetch(`categories/${id}`, {\n      method: 'DELETE'\n    })\n    .then(() => {\n      const catLeft = category.filter(cato => cato.id !== id)\n      setCategory(catLeft)\n    })\n  }\n\n  const handleDelProd = proId => {\n    fetch(`products/${proId}`, {method: 'DELETE'})\n    .then(() => {\n      const prodLeft = products.filter(prod => prod.id !== proId)\n      setProducts(prodLeft)\n    })\n  }\n\n  const handleDelcust = id => {\n    fetch(`customers/${id}`, {method: 'DELETE'})\n    .then(() => {\n      const custLeft = customers.filter(cust => cust.id !== id)\n      setCustomers(custLeft)\n    })\n  }\n\n  const handleOrderCancel = customerId => {\n    fetch(`ordersAll/${customerId}`, {method: 'DELETE'})\n    .then(() => {\n      const orderLeft = orders.filter(ord => ord.customer_id !== customerId)\n      setOrders(orderLeft)\n    })\n  }\n\n  const submitInv = invInfo => {\n      fetch('/invoices', {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({\n          ...invInfo,\n          complete : false,\n        organization_name : user.organization_name\n      })\n    })\n    .then(r => r.json())\n    .then(invInfo => {\n      setInvoice([...invoice, invInfo])\n    })\n  }\n\n  const handleFinalize = (customerId,grandTotal) => {\n   console.log(customerId, grandTotal)\n    if(sessionInv){\n      fetch(`/invoices/${sessionInv}`, {\n        method: 'PATCH',\n        headers: {'Content-Type' : 'application/json'},\n        body: JSON.stringify({\n          grand_total : grandTotal,\n          complete: true\n        })\n      })\n      .then(r => r.json())\n      .then(updateInv => {\n        const updateInvList = invoice.map(inv => {\n          if(inv.id === updateInv.id){\n            return updateInv;\n          }else{\n            return inv\n          }\n        })\n        setInvoice(updateInvList)\n      })\n    }\n\n    fetch(`/invoiceFalse`, {method: 'DELETE'})\n    .then(() => {\n      const invLeft = invoice.filter(inv => inv.customer_id !== customerId)\n      setInvoice(invLeft)\n    })\n   \n\n    fetch(`ordersFinal/${customerId}`, {method: 'DELETE'})\n    .then(() => {\n      const orderLeft = orders.filter(ord => ord.customer_id !== customerId)\n      setOrders(orderLeft)\n    })\n    setSessionInv([])\n  }\n  return (\n    <>\n      <div className='grid-container'>\n        <Navigation setShowBar={setShowBar} setUser={setUser}/>\n        <SideBar showbar={showbar}/>\n\n        <main style={showbar ? {marginLeft:'250px'} : {marginLeft:'60px'}}>\n        <Switch>\n          \n            <Route path='/' exact={true}> \n                <Home totalProd={totalProd} totalCustomers={totalCustomers} userId={user.id}/>\n            </Route>\n            <Route path='/category'>\n              <AddCategory category={category} userId={user.id} submitCategory={submitCategory} handleDelCategory={handleDelCategory} setCategory={setCategory} />\n            </Route>\n            <Route path='/products'>\n              <Products products={products} handleDelProd={handleDelProd} category={category} submitProduct={submitProduct} setProducts={setProducts}/>\n            </Route>\n            <Route path='/customers'>\n              <Customers customers={customers} submitCustomer={submitCustomer} setCustomers={setCustomers}\n              userId={user.id} handleDelcust={handleDelcust}/>\n            </Route>\n\n            <Route path='/orders'>\n              <Invoice customers={customers} products={products} orders={orders} submitOrder={submitOrder}\n               handleOrderCancel={ handleOrderCancel} handleFinalize={handleFinalize} submitInv={submitInv}invoice={invoice} userId={user.id}/>  \n            </Route>   \n            <Route path='/pdf'>\n              <Transactions userId={user.id}/>  \n            </Route>      \n        </Switch>\n        </main>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport './index.css';\nimport './CSS/sidebar.css';\nimport './CSS/header.css';\nimport './CSS/category.css';  \nimport './CSS/products.css';\nimport './CSS/customers.css';\nimport './CSS/orders.css';\nimport './CSS/home.css';\nimport './CSS/transactions.css';\nimport './CSS/login.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n \nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}